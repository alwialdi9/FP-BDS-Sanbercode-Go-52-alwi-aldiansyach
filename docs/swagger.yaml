definitions:
  controllers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.Menu:
    properties:
      id:
        type: string
      quantity:
        type: integer
    type: object
  controllers.MenuParams:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: string
    type: object
  controllers.MenuRestaurantInput:
    properties:
      menus:
        items:
          $ref: '#/definitions/controllers.MenuParams'
        type: array
      restaurant_id:
        type: string
    type: object
  controllers.OrderMenuInput:
    properties:
      order_menu:
        items:
          $ref: '#/definitions/controllers.Menu'
        type: array
      restaurant_id:
        type: string
    required:
    - order_menu
    - restaurant_id
    type: object
  controllers.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  controllers.ResetLinkInput:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controllers.ResetPassInput:
    properties:
      new_password:
        type: string
      password:
        type: string
    required:
    - new_password
    - password
    type: object
  controllers.RestaurantInput:
    properties:
      city:
        type: string
      name:
        type: string
    type: object
  controllers.ReviewUserInput:
    properties:
      content:
        type: string
      rating:
        type: integer
      restaurant_id:
        type: string
    required:
    - rating
    - restaurant_id
    type: object
  models.OrderHistory:
    properties:
      created_at:
        type: string
      id:
        type: integer
      restaurantID:
        type: integer
      total_price:
        type: integer
      updated_at:
        type: string
      userID:
        type: integer
    type: object
  models.Restaurant:
    properties:
      city:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /create/menus:
    post:
      consumes:
      - application/json
      description: Add menu by id Restaurant
      parameters:
      - description: the body to create a menu restaurant
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.MenuRestaurantInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: HTTP-X-UID. Fill with id user
        in: header
        name: HTTP-X-UID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerToken: []
      summary: Create Menus
      tags:
      - Menus
  /create/orders:
    post:
      consumes:
      - application/json
      description: Create order user by resto
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: HTTP-X-UID. Fill with id user
        in: header
        name: HTTP-X-UID
        required: true
        type: string
      - description: for create order
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.OrderMenuInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/models.OrderHistory'
            type: object
      security:
      - BearerToken: []
      summary: Create order
      tags:
      - User
  /delete/menus:
    delete:
      consumes:
      - application/json
      description: Delete menus by restaurant id
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: HTTP-X-UID. Fill with id user
        in: header
        name: HTTP-X-UID
        required: true
        type: string
      - description: restaurant id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerToken: []
      summary: Delete Menus
      tags:
      - menus
  /get_all_resto:
    get:
      consumes:
      - application/json
      description: Get data for all resto
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get All Restaurant
      tags:
      - restaurant
  /get_reset_link:
    post:
      consumes:
      - application/json
      description: get Link by ID
      parameters:
      - description: the body to get reset link password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ResetLinkInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get Reset Link
      tags:
      - Auth
  /login:
    post:
      consumes:
      - application/json
      description: Logging to get jwt token
      parameters:
      - description: the body to login a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login User
      tags:
      - Auth
  /register:
    post:
      description: registering a user from public access.
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Register a user.
      tags:
      - Auth
  /reset_password:
    post:
      consumes:
      - application/json
      description: reset password
      parameters:
      - description: the body to reset password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ResetPassInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset Password
      tags:
      - Auth
  /restaurant/create:
    post:
      consumes:
      - application/json
      description: Create Restaurant
      parameters:
      - description: the body to create a restaurant
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.RestaurantInput'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: HTTP-X-UID. Fill with id user
        in: header
        name: HTTP-X-UID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/models.Restaurant'
            type: object
      security:
      - BearerToken: []
      summary: Create data Restaurant
      tags:
      - restaurant
  /send_review:
    post:
      consumes:
      - application/json
      description: Endpoint for create review user
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: HTTP-X-UID. Fill with id user
        in: header
        name: HTTP-X-UID
        required: true
        type: string
      - description: the body to create a review
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.ReviewUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Create Review
      tags:
      - User
  /show/order/:id/restaurant:
    get:
      consumes:
      - application/json
      description: Get Order by id
      parameters:
      - description: Restaurant id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderHistory'
      summary: Show Order By Resto
      tags:
      - Order User
swagger: "2.0"
